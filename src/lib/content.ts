export const MAIN = `<h1>Notes App 📝</h1><p>Este proyecto es una evolución de una simple implementación personalizada de TipTap ( un editor de texto ) a una aplicación de gestión y organización de notas que uso día a día, con vistas a ser una próxima aplicación multiplataforma.</p><p><strong>Notes</strong> busca ser un proyecto intuitivo, simple, facil de usar y extensible a nuevas necesidades. El ejemplo más claro es la integración de un plugin ( <strong>Math </strong>) que permite la escritura de expresiones matemáticas con LaTeX. Parte del objetivo, también, es lograr incorporar nuevas tecnologías y es por ello que se adoptan nuevas tecnologías.</p><ul><li><p><a target="_self" rel="prefetch" href="/?note=changelog">Changelog</a></p></li></ul><h2>Tecnologías</h2><ul><li><p><a target="_blank" rel="noopener noreferrer" href="https://nextjs.org/">Next.js:</a> Framework web.</p></li><li><p><a target="_blank" rel="noopener noreferrer" href="https://tailwindcss.com/">Tailwind CSS:</a> Framework CSS para implementar el diseño.</p></li><li><p><a target="_blank" rel="noopener noreferrer" href="https://tiptap.dev/">Tiptap:</a> Biblioteca que proporciona utilidades para desarrollar editores de texto personalizados.</p></li><li><p><a target="_blank" rel="noopener noreferrer" href="https://zustand-demo.pmnd.rs/">Zustand:</a> Gestion de estado global y almacenamiento local.</p></li><li><p><a target="_blank" rel="noopener noreferrer" href="https://tauri.app/">Tauri </a>( Próximamente... ): Para la creación de una aplicación de escritorio.</p></li></ul><h2>Historia</h2><p>Los intentos previos de crear un editor de texto funcional resultaron en código complejo y poco intuitivo. La implementación de Tiptap trae código legible y fácil de mantener, así como la posibilidad de ampliar las funcionalidades.</p><h2>Features</h2><ul><li><p><strong>Custom text editor:</strong> Editor personalizadon con la implementación de TipTap.</p></li><li><p><strong>Syntax Highlight:</strong> Resaltado de sintaxis para bloques de código. Leer más sobre <a target="_self" rel="prefetch" href="/?note=syntax">syntax higlight</a>.</p></li><li><p><strong>MathPlugin: </strong>Implementación personalizada de KaTeX para la escritura de expresiones matemáticas. Basada en <a target="_blank" rel="noopener noreferrer" href="https://benrbray.com/prosemirror-math/">BenRBray Math</a>. Leer más sobre <a target="_self" rel="prefetch" href="/?note=math">MathPlugin</a>.</p></li><li><p><strong>Custom components:</strong> Creación de componentes personalizados (Callout, MathDisplay, MathInline, etc).</p></li><li><p><strong>Gestión y organización de notas:</strong> Permite la creación de notas y carpetas anidadas para una mejor organización.</p></li><li><p><strong>LocalStorage:</strong> De momento, todas las notas son gestionadas en el almacenamiento local, permitiendo la utilización de la app sin conexión.</p></li></ul><ul><li><p><strong>Internal links:</strong> Permite la posibilidad de crear links entre notas. Leer más en <a target="_self" rel="prefetch" href="/?note=routing">routing</a>.</p></li></ul><h2>Future Features</h2><ul><li><p><strong>Drag&amp;Drop:</strong> Posibilidad de arrastrar y soltar las notas o carpetas para facilitar la organización.</p></li><li><p><strong>Image display:</strong> Renderizado de imagenes dentro del editor.</p></li><li><p><strong>Bubble editor y mejoras a UI:</strong> Mejoras en la interfaz para facilitar el uso de dispositivos móviles.</p></li><li><p><strong>Note Only Editor:</strong> Integración de atajos de teclado y comandos para cada funcionalidad, permitiendo su uso sin la necesidad de un menú.</p><ul><li><p><strong>Estado actual:</strong> 85%</p></li></ul></li></ul><p></p><blockquote><p><a target="_blank" rel="noopener noreferrer" href="https://www.uspiri.com/">Uriel Spiridione</a></p></blockquote>`;
const CHANGELOG = `<h1>Changelog</h1><p>Todos los cambios notables en este proyecto se documentarán en este archivo. El formato está basado en&nbsp;<a target="_blank" rel="noopener noreferrer nofollow" href="https://keepachangelog.com/en/1.1.0/">Keep a Changelog</a>, y este proyecto sigue las reglas de&nbsp;<a target="_blank" rel="noopener noreferrer nofollow" href="https://semver.org/spec/v2.0.0.html">Semantic Versioning.</a></p><h2>[Unreleased]</h2><p>Proximos cambios e implementaciones.</p><h3>Added</h3><ul><li><p><strong>Drag&amp;Drop:</strong> Posibilidad de arrastrar y soltar notas dentro de carpetas o carpetas dentro de carpetas.</p></li></ul><hr><h2>[1.2.1] | 08-05-2024</h2><h3>Added</h3><ul><li><p><strong>Default notes:</strong> Cuatro notas con <code>id</code> especiales. <code>changelog, math, routing, syntax</code></p></li><li><p><strong>Internal note reference:</strong> para crear un link a una nota interna ahora puede realizarse simplemente indicando <code>note=&lt;note_id&gt;</code> en el cuadro de alerta.</p></li></ul><h3>Fixed</h3><ul><li><p><strong>Suspense component: </strong>Next requiere utilizar el componente <code>&lt;Suspense&gt;</code> para la gestión de parámetros.</p></li><li><p><strong>Sidebar selected note:</strong> Las notas en el sidebar no se seleccionan si es la renderizada por el editor.</p></li></ul><hr><h2>[1.2.0] | 06-05-2024</h2><p>Versión centrada en la implementación de enlaces internos y mejora en la gestión del almacenamiento local.</p><h3>Added</h3><ul><li><p><strong>Route based note indentification:</strong> Premite "volver astrás" a la nota en la que te encontrabas previamente, hacer enlaces internos entre notas y realizar optimizaciones en el uso de memoria del LocalStorage.</p></li><li><p><strong>Internal or external links:</strong> Identificación de enlaces internos o externos.</p><ul><li><p>Los enlaces embebidos apuntan condicionalmente a una nueva pestaña o a la misma dependiendo si el enlace es interno o externo.</p></li><li><p>Los enlaces internos son precargados <code>prefetch</code> para evitar parpadeos.</p></li></ul></li></ul><h3>Changed</h3><ul><li><p>Ahora el menú lateral permanecerá cerrado o abierto y se guardará el estado. Ya no se cerrará atomáticamente al cambiar de nota.</p></li></ul><h2>Fixed</h2><ul><li><p><strong>Latex on Codeblocks:</strong> Solución al problema que evitaba poder escribir signos $ dentro de los bloques o lineas de código.</p></li></ul><hr><h2>[1.1.0] | 03-05-2024</h2><h3>Added</h3><ul><li><p><strong>Latex support:</strong> Añade soporte para latex permitiéndo escribir expresiones matemáticas comlejas tanto en linea como en bloque mediante el uso de la librería KaTeX.</p></li></ul><h3>Changed</h3><ul><li><p><strong>Inline Codeblick Style</strong>: Se agrega un estilo coherente a las lineas de código que antes no tenían.</p></li></ul><h2>[1.0.0] | 29-04-20244</h2><p>Esta versión marca el inicio de un seguimiento de cambios para la aplicación. Es un resumen de todas las implementaciones realizadas y no rastreadas hasta el momento. Se toma la decisión de comenzar el tracking desde la versión <code>1.0.0</code> dado que las características implementadas son significativas y constituyen un sistema funcional.</p><h3>Added</h3><ul><li><p><strong>TipTap:</strong> Biblioteca que posibilita la creación del editor de texto para cada Nota, provee la posibilidad de agregar plugins para extender las funcionalidades y cubrir las necesidades que surjan durante el desarrollo.</p></li><li><p><strong>Editor Menú:</strong> Interfaz diseñada para agregar acciones que puedan hacer cambios en el contenido del editor.</p></li><li><p><strong>Plugin StarterKit:</strong> Provee una configuración básica para TipTap.</p></li><li><p><strong>Plugin SlashCommand:</strong> Plugin personalizado que permite ejecutar acciones desde un menu desplegado al escribir "/".</p></li><li><p><strong>Plugin Callout:</strong> Plugin personalizado que introduce al componente "Callout" para resaltar información importante de cada nota.</p></li><li><p><strong>Plugin TaskList:</strong> Permite crear listas de tareas dentro de las notas.</p></li><li><p><strong>Plugin LowlightCodeblock:</strong> Permite agregar la sintaxis de colores a los bloques de código.</p></li><li><p><strong>Notes &amp; Folder:</strong> Modelo de notas y carpetas para gestionar el guardado y la organización de notas.</p></li><li><p><strong>Sidebar:</strong> Agrega un panel lateral desde el cual se pueden ver y gestionar las notas y carpetas como también la configuración del editor.</p></li><li><p><strong>LocalStorage:</strong> Capacidad de guardar las notas y capetas de forma local en el ordenador y preservar la información entre versiones.</p></li></ul>`;
const MATH = `<h1>Mathematical expressions with <math-inline class=\"math-node\" data-latex=\"KaTeX\"></math-inline></h1><p>El soporte para KaTeX provee dos plugins personalizados para escribir expresiones matemáticas cómodamente dentro de la aplicación, estas pueden ser de dos tipos \"display\" e inline. Katex ofrece una amplia gama de simbolos y funciones que se encuentran detallados en la documentación <a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://katex.org/docs/supported\">Supported Functions</a>.</p><p>La implementación fue inspirada por trabajo del investigador e ingeniero de Software <a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://benrbray.com/\">Ben R. Bray</a> en su proyecto <a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://benrbray.com/prosemirror-math/\">ProsemirrorMath</a>.</p><h2>Display</h2><math-display class=\"math-node\" latex=\"P\\Big( \n  \\displaystyle\\bigcup_{n=1}^{\\infin} A_n \n\\Big)\n\\leq \\displaystyle\\sum_{n=1}^{\\infin} P(A_n)\n\\qquad \\qquad \\forall n \\in \\N\"></math-display><pre><code class=\"language-txt\">P\\Big( \\displaystyle\\bigcup_{n=1}^{\\infin} A_n \\Big)\n\\leq \\displaystyle\\sum_{n=1}^{\\infin} P(A_n)\n\\qquad \\qquad \\forall n \\in \\N</code></pre><h2>Inline</h2><ul><li><p>Sea <math-inline class=\"math-node\" data-latex=\"f(x):\\R \\to \\R^n\"></math-inline> una función continua definida en <math-inline class=\"math-node\" data-latex=\"\\R^n\"></math-inline> y ...</p><pre><code class=\"language-txt\">f(x): \\R \\to \\R^n</code></pre></li></ul><h2>Modo de uso</h2><p>Los nodos matemáticos en linea estan delimitados por <code>$ </code>. Luego de tipear el signo de dolar y cerrar una sentencia, aparecerá la expresión matemática en linea.</p><p>Para mostrar un bloque o display matemático, en una nueva linea bastará con presionar <code>$$ </code>para mostrar el display. Es posible escribir expresiones de múltiples lineas y estas se renderizarán como un bloque.</p><callout name=\"caution\" label=\"Caution\"><ul><li><p>El display, de momento, no posee las mismas funciones de accesibilidad que el inline, por ejemplo: Salir al estar al final del texto y presionar la tecla de flecha derecha (<math-inline class=\"math-node\" data-latex=\"\\to\"></math-inline>).</p></li></ul><ul><li><p><s>Hay un pequeño bug al escibir notas matemáticas dentro de bloques de código o código en linea.</s></p></li><li><p>Al ingresar por izquierda a una expresión en linea, el cursor se ubica al final del texto.</p></li><li><p>El texto que se muestra en un input y tiene ancho fijo.</p></li><li><p>El soporte para <math-inline class=\"math-node\" data-latex=\"KaTeX\"></math-inline> es del 90%/95%. Pueden existir algúnos simbolos que no puedan ser reproducidos.</p></li><li><p>De momento, el componente inline no puede copiar y pegarse. Display si.</p></li><li><p>De momento, el componente inline no tiene un commando <code>toggleMathInline()</code></p></li></ul></callout>`;
const SYNTAX = `<h1>Codeblock Syntaxhiglight</h1><p>Documento de pruba para la implementación de un syntax highlighter en lo bloques de código del edito. Por defecto el bloque de código se se creará como texto plano pero es posible indicar el lenguaje escribiendo \`\`\` seguido del alias del lenguaje a resaltar \`\`\`&lt;alias&gt;.</p><blockquote><p>Ej: \`\`\`ts</p></blockquote><h2>Texto plano</h2><pre><code class="language-plaintext">Este Codeblock es un texto plano, no debería tener colores especiales\nconst hola = "Hola";</code></pre><ul><li><p><strong>Alias:</strong> "plaintext", "text", "txt".</p></li></ul><h2>HTML</h2><pre><code class="language-html">&lt;h1&gt;Hello World!&lt;/h1&gt;\n&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.&lt;/p&gt;\n&lt;ul&gt;\n  &lt;li&gt;Item list&lt;/li&gt;\n  &lt;li&gt;Item list 2&lt;/li&gt;\n&lt;/ul&gt;</code></pre><ul><li><p><strong>Alias:</strong> "html", "xml", "svg", "xhtml".</p></li></ul><h2>CSS</h2><pre><code class="language-css">body, .usertext {\n  background: #600;\n  font-family: Chunkfive, sans;\n  --heading-1: 30px/32px Helvetica, sans-serif;\n\n  .nested-class{\n    color: red;\n  }\n}\n\n@import url(print.css);\n@media print {\n  a[href^=http]::after {\n    content: attr(href)\n  }\n}</code></pre><ul><li><p><strong>Alias:</strong> "css".</p></li></ul><h2>Javascript</h2><pre><code class="language-js">for (let i = 0; i &lt; cars.length; i++) {\n  text += cars[i] + "&lt;br&gt;";\n}\n\nexport function Home {\n  return &lt;h1&gt;Hello World!&lt;/h1&gt;\n}</code></pre><ul><li><p><strong>Alias:</strong> "javascript", "js", "jsx".</p></li></ul><h2>Typescript</h2><pre><code class="language-ts">export const Home = () =&gt; {\n  return &lt;h1&gt;Hello World!&lt;/h1&gt;\n}\n\nconst name: string = "URIEL";\nconsole.log(name);\n\nexport interface NoteEditorProps {\n  editorConfig: {\n    vertical?: boolean;\n    editable?: boolean;\n  };\n  content: string;\n  onUpdate?: (editor: Editor) =&gt; void;\n}</code></pre><ul><li><p><strong>Alias:</strong> "typescript", "ts", "tsx".</p></li></ul><h2>JSON</h2><pre><code class="language-json">{\n  "name": "Milanesas y papas fritas",\n  "dataschema": "6620038924856471507cf51b"\n}</code></pre><ul><li><p><strong>Alias:</strong> "json", "jsonc".</p></li></ul><h2>HTTP</h2><pre><code class="language-http">POST /task?id=1 HTTP/1.1\nHost: example.org\nContent-Type: application/json; charset=utf-8\nContent-Length: 137\n\n{\n  "status": "ok",\n  "extended": true,\n  "results": [\n    {"value": 0, "type": "int64"},\n    {"value": 1.0e+3, "type": "decimal"}\n  ]\n}</code></pre><ul><li><p><strong>Alias:</strong> "http", "https".</p></li></ul><h2>SQL</h2><pre><code class="language-sql">CREATE TABLE "topic" (\n    "id" integer NOT NULL PRIMARY KEY,\n    "forum_id" integer NOT NULL,\n    "subject" varchar(255) NOT NULL\n);\nALTER TABLE "topic"\nADD CONSTRAINT forum_id FOREIGN KEY ("forum_id")\nREFERENCES "forum" ("id");\n\n-- Initials\ninsert into "topic" ("forum_id", "subject")\nvalues (2, \'D\'\'artagnian\');</code></pre><ul><li><p><strong>Alias:</strong> "sql".</p></li></ul><h2>Markdown</h2><pre><code class="language-md"># hello world\n\nyou can write text [with links](http://example.com) inline or [link references][1].\n\n* one _thing_ has *em*phasis\n* two __things__ are **bold**\n\n[1]: http://example.com</code></pre><ul><li><p><strong>Alias:</strong> "markdown", "md", "mkdown".</p></li></ul><h2>Rust</h2><pre><code class="language-rs">#[derive(Debug)]\npub enum State {\n    Start,\n    Transient,\n    Closed,\n}\n\nimpl From&lt;&amp;\'a str&gt; for State {\n    fn from(s: &amp;\'a str) -&gt; Self {\n        match s {\n            "start" =&gt; State::Start,\n            "closed" =&gt; State::Closed,\n            _ =&gt; unreachable!(),\n        }\n    }\n}</code></pre><ul><li><p><strong>Alias:</strong> "rust", "rs".</p></li></ul><h2>Java</h2><pre><code class="language-java">class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println("Hello, World!"); \n    }\n}</code></pre><ul><li><p><strong>Alias:</strong> "java", "jsp".</p></li></ul><h2>Bash</h2><pre><code class="language-bash">#!/bin/bash\n\n###### CONFIG\nACCEPTED_HOSTS="/root/.hag_accepted.conf"\nBE_VERBOSE=false\n\nif [ "$UID" -ne 0 ]\nthen\n echo "Superuser rights required"\n exit 2\nfi\n\ngenApacheConf(){\n echo -e "# Host \${HOME_DIR}$1/$2 :"\n}\n\necho \'"quoted"\' | tr -d \\" &gt; text.txt</code></pre><ul><li><p><strong>Alias:</strong> "bash", "sh", "zsh".</p></li></ul><h2>Shell (Console)</h2><pre><code class="language-shell">$ git checkout main\nSwitched to branch \'main\'\nYour branch is up-to-date with \'origin/main\'.</code></pre><ul><li><p><strong>Alias:</strong> "shell", "console".</p></li></ul><p></p><callout name="note" label="Nota"><p>De momento solo se puede acceder a la sintáxis de los codeblock mediante la escritura de <strong>\`\`\`&lt;alias&gt;</strong>. En futuras versiones se podrá cambiar el lenguaje desde un selector ubicado dentro del codeblock.</p><p>Esto facilitará el uso del editor y la aplicación en dispositivos moviles.</p></callout>`;
const ROUTING = `<h1>Notes Routing system</h1><p>Con el uso contante de <strong>Notas</strong> y pasar de unas a otras, surge la necesidad de "volver atras" a la nota anterior y de crear enlaces para referenciar otras notas. Estos dos problemas, hasta el momento, eran imposibles de solventar dado que el cambio de una nota a otra se manejaba mediante un estado interno de la aplicación.</p><callout name="success" label="Creación de enlaces internos"><p>Para crear un enlace interno basta con copiar y pegar la url de la página o simplemente indicar <code>note=&lt;note_id&gt;</code> en el cuadro de alerta al crear un enlace, en dónde <code>&lt;note_id&gt;</code> es el <code>ID</code> de una nota. Ej: <code>note=changelog</code>.</p></callout><p>A contuniación se detalla el problema y la solución implementada.</p><h2>Problema</h2><p>En general, al estar en google <code>https://google.com</code> y luego entrar a instagram <code>https://instagram.com</code> e ingresar al nuestro perfil <code>https://instagram.com/profile</code> podemos notar como la url cambia, y de esta forma queda guardada en el historial que nos permite volver atrás a la página anterior. Pero en notas esta url nunca cambia y, por lo tanto, el historial tampoco haciendo imposible volver atras.</p><p>Lo mismo sucede al querer hacer un enlace dentro de una nota que te lleve a otra nota, como <code>https://notes.uspiri.com</code> no cambia, el enlace siempre es el mismo y no es posible, con el sistema anterior, hacer referencia a una nota.</p><pre><code class="language-json">{\n    "root": {\n        "id": "root",\n        "name": "Root",\n        "notes": [\n            // ... //\n        ],\n        "folders": [\n            // ... //\n        ]\n    },\n    "selectedNote": {\n        "id": "123",\n        "title": "Selected note",\n        "content": "content"\n    }\n}</code></pre><h2>Solución</h2><p>Haciendo que cada una de las notas tenga su propia <code>url</code> identificada con su ID podremos lograr capturarlas para que el editor las muestre, modifique y o edite. Basta con admitir en el sistema de ruteo un esquema como el siguiente:</p><pre><code class="language-text">http://localhost:3000/?note=&lt;note_id&gt;</code></pre><p>Una vez puesto en práctica es sencillo obtener este parámtro <code>note=&lt;note_id&gt;</code> y con ella buscar dentro de <code>root</code> la nota correspondiente para mostrar en el editor. En caso de no coincidir el id con ningúna nota podemos hacer que redireccine a cualquier otra nota.</p><p>Haciendo esto nos podemos deshacer de <code>selectedNote</code> que, en si mismo, es una nota duplicada, la cual sirve para luego modificar la que se encuentra dentro de la carpeta principal <code>root</code> mejorando un poco la gestion de memoria.</p><p>También abre la posibilidad de crear enlaces anclados a titulos, es decir: enlaces capaces de llevarte a una sección específica de una nota, estos tendrían el siguiente esquema:</p><pre><code class="language-txt">http://localhost:3000/?note=&lt;note_id&gt;#&lt;title_id&gt;</code></pre><h2>Ventajas y desventajas</h2><p>Este nuevo modelo no presenta desventajas aparentes, de hecho permite optimizaciones de memoria y simplificaciones de código. La mayor complicación es identificar si existe o no existe un determinado id y ejecutar una acción en caso de no existir.</p><p>También abre la puerta a dos nuevos desarrollos:</p><ol><li><p>Titulos anclados por enlace interno</p></li><li><p>Renderizado condicional de componentes con el componente <code>&lt;Link&gt;</code></p></li></ol><callout name="caution" label="Caution"><p>La UI para cargar los enlaces sigue siendo un simple alert, queda pendiente para futuras versiones trabajar ese aspecto de la UI y agregar un atajo como el de Markdown.</p><pre><code class="language-md">[Text](http://localhost:3000/?note=LVVEYCWLROQ)  ==&gt; Esto se transofmaría en un enlace.</code></pre></callout>`;

export const contentList: Record<string, string> = {
  changelog: CHANGELOG,
  math: MATH,
  syntax: SYNTAX,
  routing: ROUTING,
};
